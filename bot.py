import os
import asyncio
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import CommandStart, Command
from aiogram.types import Message
from aiogram.enums import ParseMode
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.client.default import DefaultBotProperties
from main import extract_title_and_id, extract_keywords, find_position
import cloudscraper

# –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–ª–∏ –≤—Å—Ç–∞–≤—å—Ç–µ —Å–≤–æ–π —Ç–æ–∫–µ–Ω –Ω–∏–∂–µ
BOT_TOKEN = os.getenv("TG_BOT_TOKEN", "<–í–ê–® –¢–û–ö–ï–ù>")

bot = Bot(
    token=BOT_TOKEN,
    default=DefaultBotProperties(parse_mode=ParseMode.HTML)
)
dp = Dispatcher(storage=MemoryStorage())

# user_id -> max_pages (session memory)
user_maxpages = {}

@dp.message(CommandStart())
async def start(message: Message):
    await message.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç! –ü—Ä–∏—à–ª–∏ –º–Ω–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–æ–≤–∞—Ä Wildberries (–∏ –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ —á–∏—Å–ª–æ —Å—Ç—Ä–∞–Ω–∏—Ü —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª), –∏ —è –ø–æ–∫–∞–∂—É –ø–æ–∑–∏—Ü–∏–∏ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º.\n\n–ü—Ä–∏–º–µ—Ä: https://www.wildberries.ru/catalog/145726284/detail.aspx \n\n–ò–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∫–æ–º–∞–Ω–¥–æ–π /maxpages 5"
    )

@dp.message(Command("maxpages"))
async def set_maxpages(message: Message):
    parts = message.text.strip().split()
    if len(parts) == 2 and parts[1].isdigit():
        max_pages = int(parts[1])
        user_maxpages[message.from_user.id] = max_pages
        await message.answer(f"‚úÖ –ó–Ω–∞—á–µ–Ω–∏–µ max-pages –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {max_pages}")
    else:
        await message.answer("–ò—Å–ø–æ–ª—å–∑—É–π: /maxpages 5")

@dp.message(F.text)
async def handle_url(message: Message):
    text = message.text.strip()
    parts = text.split()
    url = parts[0]
    max_pages = 3  # default
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∫–∞–∑–∞–ª —á–∏—Å–ª–æ –ø–æ—Å–ª–µ —Å—Å—ã–ª–∫–∏
    if len(parts) > 1 and parts[1].isdigit():
        max_pages = int(parts[1])
    elif message.from_user.id in user_maxpages:
        max_pages = user_maxpages[message.from_user.id]
    if not url.startswith("http") or "wildberries.ru/catalog/" not in url:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–æ–≤–∞—Ä Wildberries.")
        return
    await message.answer(f"‚è≥ –ò—â—É –ø–æ–∑–∏—Ü–∏–∏ —Ç–æ–≤–∞—Ä–∞ (max-pages: {max_pages})... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –¥–æ 30 —Å–µ–∫—É–Ω–¥.")
    try:
        scraper = cloudscraper.create_scraper()
        title, product_id = extract_title_and_id(url, scraper)
        keywords = extract_keywords(title)
        result = f"<b>–ó–∞–≥–æ–ª–æ–≤–æ–∫:</b> {title}\n<b>ID:</b> {product_id}\n\n<b>–ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞:</b> {', '.join(keywords)}\n\n"
        for kw in keywords:
            page_num, pos, checked = find_position(kw, product_id, scraper, max_pages)
            if page_num:
                result += f"<b>{kw}</b>: —Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page_num}, –ø–æ–∑–∏—Ü–∏—è {pos} (–ø—Ä–æ–≤–µ—Ä–µ–Ω–æ —Å—Å—ã–ª–æ–∫: {checked})\n"
            else:
                result += f"<b>{kw}</b>: –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –ø–µ—Ä–≤—ã—Ö {max_pages} —Å—Ç—Ä–∞–Ω–∏—Ü–∞—Ö (–ø—Ä–æ–≤–µ—Ä–µ–Ω–æ —Å—Å—ã–ª–æ–∫: {checked})\n"
        await message.answer(result)
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}")

async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main()) 